generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  emailVerified        DateTime?
  password             String?
  name                 String?
  role                 UserRole? @default(USER)
  image                String?
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  isActive             Boolean   @default(true)
  organizationId       String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]
  organization  Organization?   @relation(fields: [organizationId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  plan      PlanType @default(FREE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users                User[]
  OrganizationSettings OrganizationSettings?
  Subscription         Subscription[]
  Workspace            Workspace[]

  @@index([slug])
  @@map("organizations")
}

model OrganizationSettings {
  id             String   @id @default(cuid())
  organizationId String   @unique
  maxUsers       Int      @default(10)
  maxSessions    Int      @default(100)
  features       Json     @default("{}")
  branding       Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  Organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("organization_settings")
}

model Subscription {
  id             String             @id @default(cuid())
  organizationId String
  plan           PlanType
  status         SubscriptionStatus @default(ACTIVE)
  startDate      DateTime           @default(now())
  endDate        DateTime?
  billingCycle   BillingCycle       @default(MONTHLY)
  amount         Float
  currency       String             @default("USD")

  Organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("subscriptions")
}

model Workspace {
  id             String   @id @default(cuid())
  name           String
  icon           String
  color          String
  type           String?
  status         String
  members        String[]
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Organization Organization @relation(fields: [organizationId], references: [id])
}

enum PlanType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  FACILITATOR
  USER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  ANNUAL
}
